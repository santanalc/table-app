[{"/home/padoca/Workspace/challenge-20201209/pharm-app/src/index.tsx":"1","/home/padoca/Workspace/challenge-20201209/pharm-app/src/reportWebVitals.ts":"2","/home/padoca/Workspace/challenge-20201209/pharm-app/src/App.tsx":"3","/home/padoca/Workspace/challenge-20201209/pharm-app/src/view/Panel/Panel.tsx":"4","/home/padoca/Workspace/challenge-20201209/pharm-app/src/theme/index.ts":"5","/home/padoca/Workspace/challenge-20201209/pharm-app/src/view/Panel/styles.ts":"6","/home/padoca/Workspace/challenge-20201209/pharm-app/src/view/Panel/UserTable/UserTable.tsx":"7","/home/padoca/Workspace/challenge-20201209/pharm-app/src/view/Panel/UserTable/styles.ts":"8","/home/padoca/Workspace/challenge-20201209/pharm-app/src/view/UserModal/UserModal.tsx":"9","/home/padoca/Workspace/challenge-20201209/pharm-app/src/view/UserModal/styles.ts":"10"},{"size":500,"mtime":1608080031976,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1608080031976,"results":"13","hashOfConfig":"12"},{"size":277,"mtime":1608580305296,"results":"14","hashOfConfig":"12"},{"size":909,"mtime":1608257127054,"results":"15","hashOfConfig":"12"},{"size":301,"mtime":1608119533974,"results":"16","hashOfConfig":"12"},{"size":583,"mtime":1608252231180,"results":"17","hashOfConfig":"12"},{"size":13792,"mtime":1608580314587,"results":"18","hashOfConfig":"12"},{"size":735,"mtime":1608236766294,"results":"19","hashOfConfig":"12"},{"size":3152,"mtime":1608580318510,"results":"20","hashOfConfig":"12"},{"size":1416,"mtime":1608174173228,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1ui3wby",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/home/padoca/Workspace/challenge-20201209/pharm-app/src/index.tsx",[],["45","46"],"/home/padoca/Workspace/challenge-20201209/pharm-app/src/reportWebVitals.ts",[],"/home/padoca/Workspace/challenge-20201209/pharm-app/src/App.tsx",[],"/home/padoca/Workspace/challenge-20201209/pharm-app/src/view/Panel/Panel.tsx",[],"/home/padoca/Workspace/challenge-20201209/pharm-app/src/theme/index.ts",[],"/home/padoca/Workspace/challenge-20201209/pharm-app/src/view/Panel/styles.ts",[],"/home/padoca/Workspace/challenge-20201209/pharm-app/src/view/Panel/UserTable/UserTable.tsx",["47"],"import React, { useEffect, useState } from \"react\";\nimport { Visibility, Search } from \"@material-ui/icons\";\nimport {\n  TextField,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  TableSortLabel,\n  Paper,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Toolbar,\n  Grid,\n  LinearProgress,\n} from \"@material-ui/core\";\nimport { useStyles } from \"./styles\";\nimport UserModal, { User } from \"../../UserModal/UserModal\";\nimport moment from \"moment\";\nimport \"moment/locale/pt-br\";\n\nexport interface Data {\n  name: string;\n  gender: string;\n  birth: string;\n}\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\ntype Order = \"asc\" | \"desc\";\n\nfunction getComparator<Key extends keyof any>(\n  order: Order,\n  orderBy: Key\n): (a: { [key in Key]: any }, b: { [key in Key]: any }) => number {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => any) {\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, any]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\ninterface HeadCell {\n  disablePadding: boolean;\n  id: keyof Data;\n  label: string;\n  alignLeft: boolean;\n}\n\nconst headCells: HeadCell[] = [\n  {\n    id: \"name\",\n    alignLeft: true,\n    disablePadding: true,\n    label: \"Nome\",\n  },\n  { id: \"gender\", alignLeft: false, disablePadding: false, label: \"Sexo\" },\n  {\n    id: \"birth\",\n    alignLeft: false,\n    disablePadding: false,\n    label: \"Data de nascimento\",\n  },\n];\n\ninterface EnhancedTableProps {\n  classes: ReturnType<typeof useStyles>;\n  onRequestSort: (\n    event: React.MouseEvent<unknown>,\n    property: keyof Data\n  ) => void;\n  order: Order;\n  orderBy: string;\n  rowCount: number;\n}\n\nfunction EnhancedTableHead(props: EnhancedTableProps) {\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property: keyof Data) => (\n    event: React.MouseEvent<unknown>\n  ) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.alignLeft ? \"left\" : \"right\"}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : \"asc\"}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n        <TableCell align=\"right\">Ações</TableCell>\n      </TableRow>\n    </TableHead>\n  );\n}\n\nexport default function UserTable() {\n  const classes = useStyles();\n  const [order, setOrder] = useState<Order>(\"asc\");\n  const [orderBy, setOrderBy] = useState<keyof Data>(\"name\");\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [userModal, setUserModal] = useState<any>({ open: false, user: {} });\n  const [rows, setRows] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [search, setSearch] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [gender, setGender] = useState(\"\");\n  const [nationality, setNationality] = useState(\"\");\n\n  // const [buttonSearch, setButtonSearch] = useState(false);\n  const nationalities = [\n    { cod: \"au\", name: \"Austrália\" },\n    { cod: \"br\", name: \"Brasil\" },\n    { cod: \"ca\", name: \"Canadá\" },\n    { cod: \"ch\", name: \"Suiça\" },\n    { cod: \"de\", name: \"Alemanha\" },\n    { cod: \"dk\", name: \"Dinamarca\" },\n    { cod: \"es\", name: \"Espanha\" },\n    { cod: \"fi\", name: \"Finlândia\" },\n    { cod: \"fr\", name: \"França\" },\n    { cod: \"gb\", name: \"Reino Unido\" },\n    { cod: \"ie\", name: \"República da Irlanda\" },\n    { cod: \"ir\", name: \"Irã\" },\n    { cod: \"nl\", name: \"Holanda\" },\n    { cod: \"nz\", name: \"Nova Zelândia\" },\n    { cod: \"tr\", name: \"Turquia\" },\n    { cod: \"us\", name: \"EUA\" },\n  ];\n\n  moment.locale(\"pt-br\");\n\n  const handleRequestSort = (\n    event: React.MouseEvent<unknown>,\n    property: keyof Data\n  ) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  function createUserList(users: any) {\n    const newUsers = users\n      .map((elem: any) => {\n        return {\n          image: elem.picture.medium,\n          name: `${elem.name.first} ${elem.name.last}`,\n          email: elem.email,\n          gender: elem.gender,\n          birth: elem.dob.date,\n          phone: elem.cell,\n          nationality: elem.location.country,\n          address: `${elem.location.city} ${elem.location.street.name} ${elem.location.street.number}`,\n          id: elem.id.name,\n        };\n      })\n      .filter((user: User) => user.name.includes(search));\n\n    return newUsers;\n  }\n\n  useEffect(() => {\n    if (filter !== \"0\") setSearch(\"\");\n  }, [filter]);\n\n  async function searchFilter() {\n    setLoading(true);\n    let parameter;\n\n    if (filter === \"\") {\n      parameter = ``;\n    }\n\n    if (filter === \"0\") {\n      parameter = `nat=${nationality}`;\n    }\n\n    if (filter === \"1\") {\n      parameter = `gender=${gender}&nat=${nationality}`;\n    }\n\n    try {\n      let response = await fetch(\n        `https://randomuser.me/api/?results=50&${parameter}`,\n        {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      let responseObject = await response.json();\n      setPage(0);\n      setRows(createUserList(responseObject.results));\n    } catch (err) {\n      console.log(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    (async () => {\n      try {\n        let response = await fetch(`https://randomuser.me/api/?results=50`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n\n        let responseObject = await response.json();\n\n        setRows(createUserList(responseObject.results));\n        setPage(0);\n      } catch (err) {\n        console.log(err);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <Toolbar>\n          <Grid container spacing={2} className={classes.filterContainer}>\n            <Grid item md={3}>\n              <FormControl variant=\"outlined\" className={classes.select}>\n                <InputLabel id=\"demo-simple-select-outlined-label\">\n                  Filtrar\n                </InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-outlined-label\"\n                  id=\"demo-simple-select-outlined\"\n                  value={filter}\n                  onChange={(e) => setFilter(e.target.value as any)}\n                  fullWidth\n                  label=\"Filtrar\"\n                >\n                  <MenuItem value=\"\">\n                    <em>Nenhum</em>\n                  </MenuItem>\n                  <MenuItem value={\"0\"}>Nome</MenuItem>\n                  <MenuItem value={\"1\"}>Sexo</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item md={4}>\n              {filter === \"0\" ? (\n                <TextField\n                  id=\"input-with-icon-textfield\"\n                  label=\"Pesquisar\"\n                  fullWidth\n                  variant=\"outlined\"\n                  value={search}\n                  onChange={(e) => setSearch(e.target.value as any)}\n                />\n              ) : filter === \"1\" ? (\n                <FormControl variant=\"outlined\" className={classes.select}>\n                  <Select\n                    labelId=\"demo-simple-select-outlined-label\"\n                    id=\"demo-simple-select-outlined\"\n                    value={gender}\n                    onChange={(e) => setGender(e.target.value as any)}\n                    fullWidth\n                  >\n                    <MenuItem value={\"male\"}>Masculino</MenuItem>\n                    <MenuItem value={\"female\"}>Feminino</MenuItem>\n                  </Select>\n                </FormControl>\n              ) : (\n                <div></div>\n              )}\n            </Grid>\n            <Grid item md={3}>\n              {filter !== \"\" && (\n                <FormControl variant=\"outlined\" className={classes.select}>\n                  <Select\n                    labelId=\"demo-simple-select-outlined-label\"\n                    id=\"demo-simple-select-outlined\"\n                    value={nationality}\n                    onChange={(e) => setNationality(e.target.value as any)}\n                    fullWidth\n                  >\n                    {nationalities.map((elem) => {\n                      return <MenuItem value={elem.cod}>{elem.name}</MenuItem>;\n                    })}\n                  </Select>\n                </FormControl>\n              )}\n            </Grid>\n            <Grid item md={2} className={classes.buttonContainer}>\n              <Button\n                color={\"secondary\"}\n                variant=\"contained\"\n                onClick={() => searchFilter()}\n              >\n                <Search style={{ marginRight: \"5px\" }} />\n                Buscar\n              </Button>\n            </Grid>\n          </Grid>\n        </Toolbar>\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={\"medium\"}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {!loading\n                ? stableSort(rows, getComparator(order, orderBy))\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((row, index) => {\n                      const labelId = `enhanced-table-checkbox-${index}`;\n\n                      return (\n                        <TableRow\n                          hover\n                          role=\"checkbox\"\n                          tabIndex={-1}\n                          key={row.name}\n                        >\n                          <TableCell component=\"th\" id={labelId} scope=\"row\">\n                            {row.name}\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            {row.gender === \"female\" ? \"Feminino\" : \"Masculino\"}\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            {moment(row.birth).format(\"ll\")}\n                          </TableCell>\n\n                          <TableCell align=\"right\">\n                            <Button\n                              aria-label=\"edit\"\n                              onClick={() => {\n                                setUserModal({ open: true, user: row });\n                              }}\n                            >\n                              <Visibility />\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })\n                : Array(10)\n                    .fill(0)\n                    .map((elem) => {\n                      return (\n                        <TableRow hover role=\"checkbox\" tabIndex={-1}>\n                          <TableCell>\n                            <LinearProgress />\n                          </TableCell>\n                          <TableCell>\n                            <LinearProgress />\n                          </TableCell>\n                          <TableCell>\n                            <LinearProgress />\n                          </TableCell>\n                          <TableCell>\n                            <LinearProgress />\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n        <UserModal\n          open={userModal.open}\n          handleClose={() => setUserModal({ open: false, user: {} })}\n          user={userModal.user}\n        />\n      </Paper>\n    </div>\n  );\n}\n","/home/padoca/Workspace/challenge-20201209/pharm-app/src/view/Panel/UserTable/styles.ts",[],"/home/padoca/Workspace/challenge-20201209/pharm-app/src/view/UserModal/UserModal.tsx",[],"/home/padoca/Workspace/challenge-20201209/pharm-app/src/view/UserModal/styles.ts",[],["48","49"],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":276,"column":6,"nodeType":"56","endLine":276,"endColumn":8,"suggestions":"57"},{"ruleId":"50","replacedBy":"58"},{"ruleId":"52","replacedBy":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createUserList'. Either include it or remove the dependency array.","ArrayExpression",["62"],["60"],["61"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [createUserList]",{"range":"65","text":"66"},[7118,7120],"[createUserList]"]